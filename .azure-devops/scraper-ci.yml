name: $(Date:yyyyMMdd)$(Rev:.r)
resources:
- repo: self
trigger:
- master
pr:
  branches:
    include:
    - master
  paths:
    include:
    - src/*
    - .azure-devops/scraper-ci.yml
    - charts/*
variables:
  DotNet.SDK.Version: '2.2.203'
  Image.TaggedName: 'tomkerkhove/promitor-agent-scraper-ci:$(Build.BuildNumber)'
jobs:
- job: Build_Job
  displayName: Build, Test & Scan Codebase
  condition: succeeded()
  pool:
    vmImage: ubuntu-16.04
  steps:
  - task: DotNetCoreInstaller@0
    displayName: 'Install .NET SDK'
    inputs:
      version: '$(DotNet.SDK.Version)'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      projects: src/Promitor.sln
      arguments: '--configuration release'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test'
    inputs:
      command: test
      projects: src/Promitor.Scraper.Tests.Unit/Promitor.Scraper.Tests.Unit.csproj
      arguments: '--configuration release'

- job: Run_Code_Quality
  displayName: Run Code Quality
  condition: succeeded()
  pool:
    vmImage: windows-2019
  steps:
  - task: DotNetCoreInstaller@0
    displayName: 'Install .NET SDK'
    inputs:
      version: '$(DotNet.SDK.Version)'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      projects: src/Promitor.sln
      arguments: '--configuration release'

  - task: alanwales.resharper-code-analysis.custom-build-task.ResharperCli@1
    displayName: 'Automated code quality checks'
    inputs:
      SolutionOrProjectPath: src/Promitor.sln

- job: Docker_Job
  displayName: Build Docker Image Tests
  condition: succeeded()
  pool:
    vmImage: ubuntu-16.04
  steps:
  - powershell: |
      $prNumber = '$(System.PullRequest.PullRequestNumber)'
      $buildNumber = '$(Build.BuildNumber)'
      Write-Host "Initial build number: '$buildNumber'"
      Write-Host "PR Number '$prNumber'"
      $buildNumber = 'PR$(System.PullRequest.PullRequestNumber)'
      Write-Host "##vso[build.updatebuildnumber]$buildNumber"
      Write-Host "Build number is '$buildNumber'"
    displayName: 'Change Build Number to PR format'
    condition: eq(variables['Build.Reason'], 'PullRequest')

  - task: Docker@1
    displayName: 'Build an image'
    inputs:
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: 'Docker Hub'
      dockerFile: ./src/Promitor.Scraper.Host/Dockerfile
      arguments: '--tag promitor-agent-scraper-ci --no-cache'
      useDefaultContext: false
      buildContext: ./src/
      imageName: '$(Image.TaggedName)'
      addDefaultLabels: false

  - task: Docker@1
    displayName: 'Run an image'
    inputs:
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: 'Docker Hub'
      command: 'Run an image'
      imageName: '$(Image.TaggedName)'
      containerName: 'promitor-ci'
      ports: '8999:80'
      volumes: '/src/metric-config.yaml:/config/metrics-declaration.yaml promitor-agent-scraper-ci'
      envVars: |
       PROMITOR_AUTH_APPID='$(Container.Env.AzureMonitor.Id)'
       PROMITOR_AUTH_APPKEY='$(Container.Env.AzureMonitor.Key)'

  - task: Docker@1
    displayName: 'Push ''tomkerkhove/promitor-agent-scraper-ci'' image to Docker Hub'
    inputs:
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: 'Docker Hub'
      command: 'Push an image'
      imageName: '$(Image.TaggedName)'
    condition: eq(variables['Build.Reason'], 'PullRequest')

- job: Integration_Test
  displayName: Integration with Helm deployment
  dependsOn: Docker_Job
  condition: succeeded()
  pool:
    vmImage: ubuntu-16.04
  steps:

  - task: HelmInstaller@0
    displayName: Helm Installer
    inputs:
      helmVersion: 2.12.3
      checkLatestHelmVersion: true
      installKubectl: true
      kubectlVersion: 1.13.5
      checkLatestKubectl: true

  - bash: |
      curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.35.0/minikube-linux-amd64
      curl -Lo minikube.sha256 https://storage.googleapis.com/minikube/releases/v0.35.0/minikube-linux-amd64.sha256
      expected=$(cat minikube.sha256)
      echo "$expected minikube" | sha256sum -c
      chmod +x minikube
      sudo mv minikube /usr/local/bin
      sudo apt-get install socat ebtables
    displayName: Minikube & Dependencies Installer

  - bash: |
      sudo minikube start --vm-driver=none --bootstrapper=kubeadm --kubernetes-version=v1.13.5
      sudo chown -R $USER $HOME/.kube
      sudo chgrp -R $USER $HOME/.kube
      sudo chown -R $USER $HOME/.minikube
      sudo chgrp -R $USER $HOME/.minikube
      minikube update-context
    displayName: Start Minikube Cluster

  - task: ShellScript@2
    inputs:
      scriptPath: ./.azure-devops/scripts/check-cluster.sh
    displayName: Wait for cluster to be up
    timeoutInMinutes: 5

  - task: HelmDeploy@0
    displayName: Helm init
    inputs:
      command: init
      upgradetiller: true

  - task: HelmDeploy@0
    displayName: Helm install
    inputs:
      command: install
      chartType: FilePath
      chartPath: ./charts/promitor-agent-scraper
      releaseName: promitor-agent-scraper
      overrideValues: >
        image.repository=tomkerkhove/promitor-agent-scraper-ci,
        image.tag=$(Build.BuildNumber),
        azureAuthentication.appId=$(Container.Env.AzureMonitor.Id),
        azureAuthentication.appKey=$(Container.Env.AzureMonitor.Key),
        scrapeConfig.schedule="* * * * *"
      valueFile: ./.azure-devops/temp-metrics-declaration.yaml

  - bash:
      POD_NAME=k get p
      kubectl port-forward $POD_NAME 9090:9090 &
      OUTPUT= $(curl localhost:9090/metrics | grep -v '#')
      metricName == $OUTPUT | cut -d' ' 1
      metricAmount == $OUTPUT | cut -d' ' 2

  - bash: |
      POD_NAME=$(kubectl get pods -l "release=promitor-agent-scraper" -o jsonpath="{.items[0].metadata.name}")
      # wait for pod to be running before port forwarding
      while [[ ! kubectl get pod $PODNAME -o jsonpath='{@.status.phase}' = 'Running' ]]
        do sleep 10
      done
      kubectl port-forward $POD_NAME 9090:9090 &
      # wait for pod to be serving data before testing output
      while [[ -z $(curl localhost:9090/metrics) ]]
        do sleep 10
      done
      # test that output has expected values (should not need to wait for these values to be correct as they are not new to Az Monitor)
      OUTPUT=$(curl localhost:9090/metrics | grep -v '#')
      METRIC_NAME=$($OUTPUT | cut -d' ' 1)
      METRIC_AMOUNT=$($OUTPUT | cut -d' ' 2)
      if [[ ! $METRIC_NAME = e2e_queue_size || ! $METRIC_AMOUNT = 1337 ]]
        then exit 1
      fi
    displayName: Port forward pod output & check values
    timeoutInMinutes: 5
    failOnStderr: true

  - bash: |
      echo "k get pods"
      kubectl get pods
      echo; echo "k get svc"
      kubectl get svc
      echo; echo "k describe deploy/promitor-agent-scraper"
      kubectl describe deploy/promitor-agent-scraper
      echo; echo "k logs deploy/promitor-agent-scraper"
      kubectl logs deploy/promitor-agent-scraper
    displayName: Output from deployment for debugging purposes
    condition: always()
